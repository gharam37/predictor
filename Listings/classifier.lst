C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 13:29:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLASSIFIER
OBJECT MODULE PLACED IN .\Objects\classifier.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE classifier.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\classifier.lst) TABS(2) OBJECT(.\Objects\classifier.obj)

line level    source

*** WARNING C500 IN LINE 1 OF classifier.c: INCORRECT LICENSE ID CODE (LIC) IN 'TOOLS.INI'
   1          #include <reg51.h>
   2          
   3          //Feel free to change methods declarations
   4          unsigned char switch_training;  // 0: training, 1: testing
   5          unsigned char switch_user;      // 0: User A, 1: User B
   6          unsigned char trainingCount;    // Counts how many times did we get measurements from the user. Starts with 
             -0.
   7          unsigned char nextChar=0; // identifies which character we expect the user to enter (index of the characte
             -r) starts with 0.
   8          unsigned char word[3] = {'.','t','i'};  // Stores the characters of the word we want to use.
   9          unsigned int TimerEntryIndex = 0;  //Initial Time at which we started Program
  10          int StartCount = 2;  //Initial Time at which we started Program 2 means not in count mode 0-1 meaning we a
             -re waiting for input
  11          int CorrectSofar = 0;
  12          int StartTraining=0; // To Stop overflow and counter from increasing when we aren't putting input .. betwe
             -en 2 runs of entering a work
  13          unsigned long TimerArray[2] = {0,0};
  14          unsigned long FirstUserData[2] = {0,0}; // should change to 9
  15          unsigned long SecondUserData[2] = {0,0}; // should change to 9
  16          long double num = 9000000000000000000;
  17          void CalculateAverage(unsigned long Values[])
  18          {
  19   1        int i =0;
  20   1        for(;i<2;i++){ //Length of array should change to 10
  21   2          if(switch_user==0){
  22   3          FirstUserData[i]+=Values[i]/2000; //Divide by the number of training should change to 5 
  23   3            Values[i] = 0; //Clear for next Count
  24   3          }
  25   2          else{
  26   3            SecondUserData[i]=Values[i]/2000;
  27   3          }
  28   2            
  29   2        }
  30   1        
  31   1        
  32   1      }
  33          void ClearTimerArray(){
  34   1        int i=0;
  35   1        for(;i<2;i++)
  36   1          TimerArray[i]=0;
  37   1      
  38   1      }
  39          void runTraining(){}
  40          // called when the user enters the whole word in the testing phase it should predict who was the user
  41          void predict(){
  42   1       
  43   1      }
  44           
  45           // TODO: you know what character did we actually read now (using the variable nextChar [it is an index to
             - the character]) so you should measure the flight time and add it to training
  46          // for the current user and same for the test time
  47          void calculateTrainTime(){
  48   1      
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 13:29:38 PAGE 2   

  49   1        
  50   1      
  51   1       
  52   1      }
  53           
  54          void calculateTestTime(){
  55   1        
  56   1            if(StartCount==0 &&StartTraining==1){ 
  57   2             unsigned long OverFlowCount = 0;
  58   2      
  59   2            TR0 = 1;            //Start the timer
  60   2      
  61   2            while(StartCount == 0  ){
  62   3                  while(TF0 == 0);   // Wait for Timer Overflow
  63   3                  OverFlowCount++;
  64   3                  TF0 = 0;
  65   3            }       //wait till the key is released
  66   2            TR0 = 0;            //Stop the timer
  67   2            if(CorrectSofar == 1){
  68   3            TimerArray[TimerEntryIndex]=(((TH0 << 8) | TL0)+0x0000FFFF*OverFlowCount)/1000; //Load timer into Array
  69   3              TimerEntryIndex++;
  70   3      
  71   3            }
  72   2            if(TimerEntryIndex ==2){ // IF Reached our maximum letter
  73   3                TimerEntryIndex = 0;
  74   3                //////// Call The Method that calculates the ecludien distance in here          
  75   3              
  76   3              }
  77   2            TH0 = 0;                //Reset the timer.
  78   2            TL0 = 0;  
  79   2            TF0=0;
  80   2            StartCount=0;
  81   2            OverFlowCount=0;
  82   2          } 
  83   1       
  84   1      }
  85          void CalculateTime(){
  86   1        if( switch_training){
  87   2          calculateTestTime();
  88   2        
  89   2        }
  90   1      
  91   1        if(StartCount==0 &&StartTraining==1){ 
  92   2             unsigned long OverFlowCount = 0;
  93   2      
  94   2            TR0 = 1;            //Start the timer
  95   2      
  96   2            while(StartCount == 0  ){
  97   3                  while(TF0 == 0);   // Wait for Timer Overflow
  98   3                  OverFlowCount++;
  99   3                  TF0 = 0;
 100   3            }       //wait till the key is released
 101   2            TR0 = 0;            //Stop the timer
 102   2            if(CorrectSofar == 1){
 103   3            TimerArray[TimerEntryIndex]=+((TH0 << 8) | TL0)+0x0000FFFF*OverFlowCount; //Load timer into Array
 104   3              TimerEntryIndex++;
 105   3      
 106   3            }
 107   2            if(TimerEntryIndex ==2){ // IF Reached our maximum letter
 108   3                TimerEntryIndex = 0;
 109   3                if(trainingCount==2) // if we finished Training for user A to be changed to 5
 110   3                {
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 13:29:38 PAGE 3   

 111   4                  trainingCount = 0; 
 112   4                  CalculateAverage(TimerArray);
 113   4                  ClearTimerArray();
 114   4                  if(!switch_user){ // If we r still in User A
 115   5                  switch_user=1; //Go to b
 116   5                  }
 117   4                  else{
 118   5                     switch_training = 1; // If we finished B .. go to training
 119   5                  }
 120   4                }           
 121   3              
 122   3              }
 123   2            TH0 = 0;                //Reset the timer.
 124   2            TL0 = 0;  
 125   2            TF0=0;
 126   2            StartCount=0;
 127   2            OverFlowCount=0;
 128   2          } 
 129   1      
 130   1      }
 131          
 132          void uartConfig(void) {
 133   1        
 134   1        SCON  = 0x50;     // Serial Port: Mode 1 (8 bits), use Timer 1 for baudrate, enable reception (bit 4)
 135   1        IE    = 0x90;     // enable global interrupt and serial receive interrupt
 136   1        
 137   1        // Baudrate = 2400 (bits/second ?) => 240 characters per second
 138   1        // Fosc     = 12 MHz
 139   1        
 140   1        // Baudrate = Fosc / (N * (256 ? TH1))
 141   1        // For (SMOD1 = 0) N = 384 : TH1 = 242.979 => 243 = 0xF3  <- We'll use this value
 142   1        // For (SMOD1 = 1) N = 192 : TH1 = 229.958 => 230 = 0xE6
 143   1        
 144   1        PCON &= 0x7F;     // set SMOD1 in PCON to 0..
 145   1                          // Tells that we are using N = 384.
 146   1                          // What does it mean? I don't know xD
 147   1        
 148   1        TMOD |= 0x21;     // timer 1, mode 2, 8-bit reload , timer 0 for counting
 149   1        TH1   = 0xF3;     // baud rate: reload value for 2400 baud @ 12MHz (to change?)
 150   1        TR1   = 1;        // start timer 1
 151   1        TL0 = 0x00;              //Initialise TIMER0 in 16 bit mode 
 152   1        TH0 = 0x00;
 153   1      }
 154          
 155          
 156          void decide(unsigned char received){
 157   1        int idx;
 158   1        for(idx = 0; idx<3; idx++)
 159   1        {
 160   2          if(word[idx] == received){
 161   3            CorrectSofar = 0;
 162   3            break;
 163   3          }
 164   2        }
 165   1        // wrong character
 166   1        if(idx != nextChar)
 167   1        {
 168   2          nextChar = 0;
 169   2          StartCount=2; //Reset Count
 170   2          CorrectSofar = 0;
 171   2          TimerArray[0]=0;
 172   2          TimerArray[1]=0;
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 13:29:38 PAGE 4   

 173   2      
 174   2          //printf("%s","type the word again please");
 175   2          return;
 176   2        }
 177   1        // calculate the flight time between this character and the previous one
 178   1        CorrectSofar = 1;
 179   1          StartCount=1; 
 180   1          StartTraining =1 ; //Stop when we finished one work for one user
 181   1      
 182   1        if(!switch_training){
 183   2          
 184   2        
 185   2          //calculateTrainTime(); // Called in MainMethod
 186   2        } else {
 187   2          calculateTestTime();
 188   2        }
 189   1        
 190   1        nextChar++;
 191   1        if(nextChar==1){
 192   2          StartCount=0;
 193   2        }
 194   1        // if we reach the last char 
 195   1        // increment the training count if it is training phase
 196   1        // call predict if we are in the testing phase
 197   1        if(nextChar == 3){ //Should Change to 10
 198   2          nextChar = 0;
 199   2          StartTraining =0 ; //Stop when we finished one work for one user
 200   2          if(!switch_training){
 201   3            trainingCount++;
 202   3            
 203   3          }
 204   2          else{
 205   3            predict();
 206   3            return;
 207   3          } 
 208   2        }
 209   1        //finalizing training after 5 inputs for the word
 210   1        if(trainingCount == 2){
 211   2          //runTraining();
 212   2          //trainingCount = 0;
 213   2          nextChar = 0;
 214   2          StartTraining = 0 ; //Stop when we finished a training for one user
 215   2          // switch to training phase of user B
 216   2          /*if(!switch_user &&!switch_training){         //Commented Cuz I already do this in my timer 
 217   2            //printf("%s","user B starts training");
 218   2            //switch_user = 1;
 219   2          } else {
 220   2          // both A and B did the training, switch to testing
 221   2            //printf("%s","Testing phase started");
 222   2            switch_training = 1;
 223   2          }*/ 
 224   2          
 225   2        }
 226   1        
 227   1      }
 228          
 229          // Option 2: interrupt-based
 230          void receive() interrupt 4 {
 231   1        unsigned char received = SBUF;
 232   1         RI = 0;
 233   1         StartCount =1;
 234   1      
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 13:29:38 PAGE 5   

 235   1        //printf("%s","Here");
 236   1        decide(received);
 237   1      }
 238          
 239          // method to read the ports and decide
 240          
 241          
 242          
 243          void main() {
 244   1        
 245   1      
 246   1        
 247   1        uartConfig();
 248   1        
 249   1        while(1)
 250   1        {
 251   2          CalculateTime();
 252   2            
 253   2        }
 254   1        
 255   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    863    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
