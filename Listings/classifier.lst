C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 19:47:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLASSIFIER
OBJECT MODULE PLACED IN .\Objects\classifier.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE classifier.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\classifier.lst) TABS(2) OBJECT(.\Objects\classifier.obj)

line level    source

*** WARNING C500 IN LINE 1 OF classifier.c: INCORRECT LICENSE ID CODE (LIC) IN 'TOOLS.INI'
   1          #include <reg51.h>
   2          
   3          bit switch_training;  // 0: training, 1: testing
   4          bit switch_user;      // 0: User A, 1: User B
   5          unsigned char trainingCount;    // Counts how many times did we get measurements from the user. Starts with 
             -0.
   6          unsigned char nextChar=0; // identifies which character we expect the user to enter (index of the characte
             -r) starts with 0.
   7          //unsigned char word[10] = {'.','t','i','e','5','R','o','n','a','l'}; // Stores the characters of the word
             - we want to use.
   8          unsigned char TimerEntryIndex = 0;  //Initial Time at which we started Program
   9          char StartCount = 2;  //Initial Time at which we started Program 2 means not in count mode 0-1 meaning we 
             -are waiting for input
  10          bit CorrectSofar = 0;
  11          bit StartTraining=0; // To Stop overflow and counter from increasing when we aren't putting input .. betwe
             -en 2 runs of entering a work
  12          unsigned int TimerArray[9] = {0,0,0,0,0,0,0,0,0};
  13          unsigned int FirstUserData[9] = {0,0,0,0,0,0,0,0,0}; 
  14          unsigned int SecondUserData[9] = {0,0,0,0,0,0,0,0,0}; 
  15          unsigned long OverFlowCount;
  16          bit predict= 0;
  17          unsigned char numberOfTrainings = 2;
  18          sbit LED = P0^0;
  19          unsigned char bound=0;
  20          unsigned char c = 0; //To increase maximum timer delay time int bound = 0; //Changes how long LED flashes 
             -depending on user
  21          void CalculateAverage(unsigned char value)
  22          {
  23   1        unsigned char i =0;
  24   1        for(;i<9;i++){ //Length of array should change to 10
  25   2          if(!switch_user){
  26   3            FirstUserData[i]+=TimerArray[i]/(value);; //Divide by the number of training should change to 5 
  27   3          }
  28   2          else{
  29   3            SecondUserData[i]=TimerArray[i]/(value);
  30   3          }
  31   2            
  32   2        }
  33   1        
  34   1        
  35   1      }
  36          void ClearTimerArray(){
  37   1        unsigned char i=0;
  38   1        for(;i<9;i++)
  39   1          TimerArray[i]=0;
  40   1      
  41   1      }
  42          
  43          void flashUser(bit user) {
  44   1        bound = 5;
  45   1        if(!user)
  46   1          bound = 30;
  47   1        TMOD = 0x01;
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 19:47:55 PAGE 2   

  48   1        TH0 = 0x0;
  49   1        TL0 = 0x0;
  50   1        TR0 = 1;
  51   1        ET0 = 1;
  52   1        EA = 1;
  53   1        while(1){
  54   2        }
  55   1      }
  56          void determineUser() {
  57   1        unsigned long dA = 0;
  58   1        unsigned long dB = 0;
  59   1        char i=0;
  60   1        for(; i<9; i++) {
  61   2          dA += (TimerArray[i] - FirstUserData[i])*(TimerArray[i] - FirstUserData[i]);
  62   2          dB += (TimerArray[i] - SecondUserData[i])*(TimerArray[i] - SecondUserData[i]);
  63   2        }
  64   1        if(dA < dB)
  65   1          flashUser(0);
  66   1        else
  67   1          flashUser(1);
  68   1      }
  69          
  70          void timer0_isr() interrupt 1{
  71   1        if(c == bound) {
  72   2          c = 0;
  73   2          LED = !LED;
  74   2        } else {
  75   2          c++;
  76   2        }
  77   1        TH0 = 0x0;
  78   1        TL0 = 0x0;
  79   1      }
  80          
  81          void TimerMethod(){
  82   1            OverFlowCount = 0;
  83   1            TR0 = 1;            //Start the timer
  84   1            while(!StartCount){
  85   2              while(!TF0);   // Wait for Timer Overflow
  86   2              if(CorrectSofar){
  87   3                OverFlowCount++;
  88   3              }
  89   2                  TF0 = 0;
  90   2            }       //wait till the key is released
  91   1            TR0 = 0;            //Stop the timer
  92   1            if(CorrectSofar){
  93   2              TimerArray[TimerEntryIndex]=+(((TH0 << 8) | TL0)+0x0000FFFF*OverFlowCount)/1000; //Load timer into Arr
             -ay
  94   2              TimerEntryIndex++;
  95   2            }else{
  96   2              TimerEntryIndex=0;
  97   2                    ClearTimerArray();
  98   2            
  99   2            }
 100   1      }
 101          void clearEverything(){
 102   1        TH0 = 0;                //Reset the timer.
 103   1        TL0 = 0;  
 104   1        TF0=0;
 105   1        StartCount=0;
 106   1        OverFlowCount=0;
 107   1      }
 108          void calculateTestTime(){
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 19:47:55 PAGE 3   

 109   1        
 110   1        if(!StartCount && StartTraining){ 
 111   2          TimerMethod();
 112   2          if(TimerEntryIndex == 9){ // IF Reached our maximum letter
 113   3            TimerEntryIndex = 0;
 114   3            CalculateAverage(1);
 115   3            predict =1;
 116   3            return;
 117   3          }
 118   2          clearEverything();
 119   2        } 
 120   1       
 121   1      }
 122          void CalculateTime(){
 123   1        if(switch_training){
 124   2          calculateTestTime();
 125   2          return;
 126   2        }
 127   1        if(StartCount==0 &&StartTraining==1){ 
 128   2          TimerMethod();
 129   2          if(TimerEntryIndex == 9){ // IF Reached our maximum letter
 130   3              TimerEntryIndex = 0;
 131   3              if(trainingCount== numberOfTrainings) // if we finished Training for user A to be changed to 5
 132   3              {
 133   4                trainingCount = 0; 
 134   4                CalculateAverage(numberOfTrainings);
 135   4                ClearTimerArray();
 136   4                if(!switch_user){ // If we r still in User A
 137   5                  switch_user = 1; //Go to b
 138   5                } else {
 139   5                  switch_training = 1; // If we finished B .. go to training
 140   5                }
 141   4              }           
 142   3              
 143   3          }
 144   2          clearEverything();
 145   2        } 
 146   1      
 147   1      }
 148          
 149          
 150          void uartConfig(void) {
 151   1        
 152   1        SCON  = 0x50;     // Serial Port: Mode 1 (8 bits), use Timer 1 for baudrate, enable reception (bit 4)
 153   1        IE    = 0x90;     // enable global interrupt and serial receive interrupt
 154   1        
 155   1        // Baudrate = 2400 (bits/second ?) => 240 characters per second
 156   1        // Fosc     = 12 MHz
 157   1        
 158   1        // Baudrate = Fosc / (N * (256 ? TH1))
 159   1        // For (SMOD1 = 0) N = 384 : TH1 = 242.979 => 243 = 0xF3  <- We'll use this value
 160   1        // For (SMOD1 = 1) N = 192 : TH1 = 229.958 => 230 = 0xE6
 161   1        
 162   1        PCON &= 0x7F;     // set SMOD1 in PCON to 0..
 163   1                          // Tells that we are using N = 384.
 164   1                          // What does it mean? I don't know xD
 165   1        
 166   1          TMOD |= 0x21;     // timer 1, mode 2, 8-bit reload , timer 0 for counting
 167   1          TH1   = 0xF3;     // baud rate: reload value for 2400 baud @ 12MHz (to change?)
 168   1          TR1   = 1;        // start timer 1
 169   1        TL0 = 0x00;              //Initialise TIMER0 in 16 bit mode 
 170   1        TH0 = 0x00;
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 19:47:55 PAGE 4   

 171   1      }
 172          
 173          unsigned char ExpectedChar(){
 174   1        
 175   1        switch (nextChar)
 176   1      {
 177   2          case 0:
 178   2              return '.';
 179   2          case 1:
 180   2              return 't';
 181   2          
 182   2         case 2:
 183   2              return 'i';
 184   2          case 3:
 185   2              return 'e';
 186   2          case 4:
 187   2              return '5';
 188   2          case 5:
 189   2              return 'R';
 190   2          case 6:
 191   2              return 'o';
 192   2          case 7:
 193   2              return 'n';
 194   2          case 8:
 195   2              return 'a';
 196   2          case 9:
 197   2              return 'l';
 198   2      
 199   2      }
 200   1      return 0;
 201   1      }
 202          void decide(unsigned char received){
 203   1        if(received != ExpectedChar())
 204   1        {
 205   2          nextChar = 0;
 206   2          StartCount=2; //Reset Count
 207   2            CorrectSofar = 0;
 208   2          ClearTimerArray();
 209   2            TimerEntryIndex=0;
 210   2          trainingCount=0;
 211   2          return;
 212   2        }
 213   1        // calculate the flight time between this character and the previous one
 214   1          CorrectSofar = 1;
 215   1        StartCount=1; 
 216   1        StartTraining =1 ; //Stop when we finished one work for one user  
 217   1        nextChar++;
 218   1        if(nextChar==1){
 219   2          StartCount=0;
 220   2        }
 221   1        // if we reach the last char 
 222   1        // increment the training count if it is training phase
 223   1        // call predict if we are in the testing phase
 224   1        if(nextChar == 10){ //Should Change to 10
 225   2          nextChar = 0;
 226   2          StartTraining =0 ; //Stop when we finished one work for one user
 227   2          if(!switch_training){
 228   3            trainingCount++;
 229   3          } else {
 230   3            return;
 231   3          } 
 232   2        }
C51 COMPILER V9.59.0.0   CLASSIFIER                                                        11/19/2018 19:47:55 PAGE 5   

 233   1        //finalizing training after 5 inputs for the word
 234   1        if(trainingCount == numberOfTrainings){
 235   2          nextChar = 0;
 236   2          StartTraining = 0 ; //Stop when we finished a training for one user
 237   2        }
 238   1        
 239   1      }
 240          
 241          
 242          void receive() interrupt 4 {
 243   1        unsigned char received = SBUF;
 244   1        RI = 0;
 245   1        StartCount =1;
 246   1        decide(received);
 247   1      }
 248          
 249          
 250          
 251          
 252          void main() {
 253   1        uartConfig();
 254   1        
 255   1        while(1)
 256   1        {
 257   2            CalculateTime();
 258   2          if(predict){
 259   3            determineUser();
 260   3            break;
 261   3          }
 262   2            
 263   2        }
 264   1        
 265   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    789    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
